// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Carcassonne.proto

#include "Carcassonne.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace carcassonne {
namespace proto {
constexpr Move::Move(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , rotation_(0)
  , skip_figure_(false)
  , direction_(0)
{}
struct MoveDefaultTypeInternal {
  constexpr MoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDefaultTypeInternal() {}
  union {
    Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDefaultTypeInternal _Move_default_instance_;
constexpr Rollout::Rollout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : moves_()
  , seed_(uint64_t{0u})
  , player_count_(0){}
struct RolloutDefaultTypeInternal {
  constexpr RolloutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RolloutDefaultTypeInternal() {}
  union {
    Rollout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RolloutDefaultTypeInternal _Rollout_default_instance_;
}  // namespace proto
}  // namespace carcassonne
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Carcassonne_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Carcassonne_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Carcassonne_2eproto = nullptr;

const uint32_t TableStruct_Carcassonne_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Move, x_),
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Move, y_),
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Move, rotation_),
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Move, skip_figure_),
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Move, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Rollout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Rollout, player_count_),
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Rollout, seed_),
  PROTOBUF_FIELD_OFFSET(::carcassonne::proto::Rollout, moves_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::carcassonne::proto::Move)},
  { 11, -1, -1, sizeof(::carcassonne::proto::Rollout)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carcassonne::proto::_Move_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carcassonne::proto::_Rollout_default_instance_),
};

const char descriptor_table_protodef_Carcassonne_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Carcassonne.proto\022\021carcassonne.proto\"t"
  "\n\004Move\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\020\n\010rotation"
  "\030\003 \001(\005\022\023\n\013skip_figure\030\004 \001(\010\022/\n\tdirection"
  "\030\005 \001(\0162\034.carcassonne.proto.Direction\"U\n\007"
  "Rollout\022\024\n\014player_count\030\001 \001(\005\022\014\n\004seed\030\002 "
  "\001(\004\022&\n\005moves\030\003 \003(\0132\027.carcassonne.proto.M"
  "ove*\271\001\n\tDirection\022\t\n\005North\020\000\022\010\n\004East\020\001\022\t"
  "\n\005South\020\002\022\010\n\004West\020\003\022\n\n\006Middle\020\004\022\r\n\tNorth"
  "East\020\005\022\r\n\tEastNorth\020\006\022\r\n\tEastSouth\020\007\022\r\n\t"
  "SouthEast\020\010\022\r\n\tSouthWest\020\t\022\r\n\tWestSouth\020"
  "\n\022\r\n\tWestNorth\020\013\022\r\n\tNorthWest\020\014b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Carcassonne_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Carcassonne_2eproto = {
  false, false, 439, descriptor_table_protodef_Carcassonne_2eproto, "Carcassonne.proto", 
  &descriptor_table_Carcassonne_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_Carcassonne_2eproto::offsets,
  file_level_metadata_Carcassonne_2eproto, file_level_enum_descriptors_Carcassonne_2eproto, file_level_service_descriptors_Carcassonne_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Carcassonne_2eproto_getter() {
  return &descriptor_table_Carcassonne_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Carcassonne_2eproto(&descriptor_table_Carcassonne_2eproto);
namespace carcassonne {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Carcassonne_2eproto);
  return file_level_enum_descriptors_Carcassonne_2eproto[0];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Move::_Internal {
 public:
};

Move::Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:carcassonne.proto.Move)
}
Move::Move(const Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:carcassonne.proto.Move)
}

inline void Move::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_)) + sizeof(direction_));
}

Move::~Move() {
  // @@protoc_insertion_point(destructor:carcassonne.proto.Move)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Move::ArenaDtor(void* object) {
  Move* _this = reinterpret_cast< Move* >(object);
  (void)_this;
}
void Move::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:carcassonne.proto.Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Move::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool skip_figure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          skip_figure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .carcassonne.proto.Direction direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::carcassonne::proto::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carcassonne.proto.Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 rotation = 3;
  if (this->_internal_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rotation(), target);
  }

  // bool skip_figure = 4;
  if (this->_internal_skip_figure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_skip_figure(), target);
  }

  // .carcassonne.proto.Direction direction = 5;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carcassonne.proto.Move)
  return target;
}

size_t Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carcassonne.proto.Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 rotation = 3;
  if (this->_internal_rotation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rotation());
  }

  // bool skip_figure = 4;
  if (this->_internal_skip_figure() != 0) {
    total_size += 1 + 1;
  }

  // .carcassonne.proto.Direction direction = 5;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Move::GetClassData() const { return &_class_data_; }

void Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Move *>(to)->MergeFrom(
      static_cast<const Move &>(from));
}


void Move::MergeFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carcassonne.proto.Move)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_rotation() != 0) {
    _internal_set_rotation(from._internal_rotation());
  }
  if (from._internal_skip_figure() != 0) {
    _internal_set_skip_figure(from._internal_skip_figure());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carcassonne.proto.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move::IsInitialized() const {
  return true;
}

void Move::InternalSwap(Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, direction_)
      + sizeof(Move::direction_)
      - PROTOBUF_FIELD_OFFSET(Move, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Move::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Carcassonne_2eproto_getter, &descriptor_table_Carcassonne_2eproto_once,
      file_level_metadata_Carcassonne_2eproto[0]);
}

// ===================================================================

class Rollout::_Internal {
 public:
};

Rollout::Rollout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  moves_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:carcassonne.proto.Rollout)
}
Rollout::Rollout(const Rollout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      moves_(from.moves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seed_, &from.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&seed_)) + sizeof(player_count_));
  // @@protoc_insertion_point(copy_constructor:carcassonne.proto.Rollout)
}

inline void Rollout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&seed_)) + sizeof(player_count_));
}

Rollout::~Rollout() {
  // @@protoc_insertion_point(destructor:carcassonne.proto.Rollout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rollout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rollout::ArenaDtor(void* object) {
  Rollout* _this = reinterpret_cast< Rollout* >(object);
  (void)_this;
}
void Rollout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rollout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rollout::Clear() {
// @@protoc_insertion_point(message_clear_start:carcassonne.proto.Rollout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  moves_.Clear();
  ::memset(&seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_) -
      reinterpret_cast<char*>(&seed_)) + sizeof(player_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rollout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .carcassonne.proto.Move moves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rollout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carcassonne.proto.Rollout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_count = 1;
  if (this->_internal_player_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_count(), target);
  }

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seed(), target);
  }

  // repeated .carcassonne.proto.Move moves = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_moves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_moves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carcassonne.proto.Rollout)
  return target;
}

size_t Rollout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carcassonne.proto.Rollout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .carcassonne.proto.Move moves = 3;
  total_size += 1UL * this->_internal_moves_size();
  for (const auto& msg : this->moves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seed());
  }

  // int32 player_count = 1;
  if (this->_internal_player_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rollout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rollout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rollout::GetClassData() const { return &_class_data_; }

void Rollout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rollout *>(to)->MergeFrom(
      static_cast<const Rollout &>(from));
}


void Rollout::MergeFrom(const Rollout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carcassonne.proto.Rollout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  moves_.MergeFrom(from.moves_);
  if (from._internal_seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  if (from._internal_player_count() != 0) {
    _internal_set_player_count(from._internal_player_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rollout::CopyFrom(const Rollout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carcassonne.proto.Rollout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rollout::IsInitialized() const {
  return true;
}

void Rollout::InternalSwap(Rollout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  moves_.InternalSwap(&other->moves_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rollout, player_count_)
      + sizeof(Rollout::player_count_)
      - PROTOBUF_FIELD_OFFSET(Rollout, seed_)>(
          reinterpret_cast<char*>(&seed_),
          reinterpret_cast<char*>(&other->seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rollout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Carcassonne_2eproto_getter, &descriptor_table_Carcassonne_2eproto_once,
      file_level_metadata_Carcassonne_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace carcassonne
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::carcassonne::proto::Move* Arena::CreateMaybeMessage< ::carcassonne::proto::Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carcassonne::proto::Move >(arena);
}
template<> PROTOBUF_NOINLINE ::carcassonne::proto::Rollout* Arena::CreateMaybeMessage< ::carcassonne::proto::Rollout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carcassonne::proto::Rollout >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
